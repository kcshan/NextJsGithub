{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n\nvar _this = this;\n\nimport React from \"react\";\nimport { useState, useReducer, memo, useMemo, useCallback, useRef } from 'react';\n\nvar countReducer = function countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n};\n\nvar MyCountFunc = function MyCountFunc() {\n  var _useReducer = useReducer(countReducer, 0),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      count = _useReducer2[0],\n      dispatchCount = _useReducer2[1];\n\n  var _useState = useState('thomas'),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var countRef = useRef();\n  countRef.current = count;\n  var config = useMemo(function () {\n    return {\n      text: \"count is \".concat(count),\n      color: count > 3 ? 'red' : 'blue'\n    };\n  }, [count]); // const handleButtonClick = useCallback(\n  //   () => dispatchCount({ type: 'add' }), \n  //   []\n  // )\n\n  var handleButtonClick = useMemo(function () {\n    return function () {\n      return dispatchCount({\n        type: 'add'\n      });\n    };\n  }, []);\n\n  var handleAlertButtonClick = function handleAlertButtonClick() {\n    setTimeout(function () {\n      alert(countRef.current);\n    }, 2000);\n  };\n\n  var handleButtonClick2 = function handleButtonClick2() {\n    // const count = this.state.count\n    setTimeout(function () {\n      return alert(_this.state.count);\n    }, 200);\n  };\n\n  return React.createElement(\"div\", null, React.createElement(\"input\", {\n    value: name,\n    onChange: function onChange(e) {\n      return setName(e.target.value);\n    }\n  }), React.createElement(Child, {\n    config: config,\n    onButtonClick: handleButtonClick\n  }), React.createElement(\"button\", {\n    onClick: handleAlertButtonClick\n  }, \"alert count\"));\n};\n\nvar Child = memo(function Child(_ref) {\n  var onButtonClick = _ref.onButtonClick,\n      config = _ref.config;\n  console.log('child render');\n  return React.createElement(\"button\", {\n    onClick: onButtonClick,\n    style: {\n      color: config.color\n    }\n  }, config.text);\n});\nexport default MyCountFunc;","map":{"version":3,"sources":["/Users/yangshasha/Downloads/workspace/coding/nodejs/NextJsGithub/nextjs-project/pages/test/b.js"],"names":["useState","useReducer","memo","useMemo","useCallback","useRef","countReducer","state","action","type","MyCountFunc","count","dispatchCount","name","setName","countRef","current","config","text","color","handleButtonClick","handleAlertButtonClick","setTimeout","alert","handleButtonClick2","e","target","value","Child","onButtonClick","console","log"],"mappings":";;;;;AAAA,SACEA,QADF,EAEEC,UAFF,EAGEC,IAHF,EAIEC,OAJF,EAKEC,WALF,EAMEC,MANF,QAOO,OAPP;;AAUA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACtC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,KAAL;AACE,aAAOF,KAAK,GAAG,CAAf;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD,CATD;;AAWA,IAAMG,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,oBAEOT,UAAU,CAACK,YAAD,EAAe,CAAf,CAFjB;AAAA;AAAA,MAEjBK,KAFiB;AAAA,MAEVC,aAFU;;AAAA,kBAGAZ,QAAQ,CAAC,QAAD,CAHR;AAAA;AAAA,MAGjBa,IAHiB;AAAA,MAGXC,OAHW;;AAKxB,MAAMC,QAAQ,GAAGV,MAAM,EAAvB;AACAU,EAAAA,QAAQ,CAACC,OAAT,GAAmBL,KAAnB;AAEA,MAAMM,MAAM,GAAGd,OAAO,CACpB;AAAA,WAAO;AACLe,MAAAA,IAAI,qBAAcP,KAAd,CADC;AAELQ,MAAAA,KAAK,EAAER,KAAK,GAAG,CAAR,GAAY,KAAZ,GAAoB;AAFtB,KAAP;AAAA,GADoB,EAKpB,CAACA,KAAD,CALoB,CAAtB,CARwB,CAgBxB;AACA;AACA;AACA;;AAEA,MAAMS,iBAAiB,GAAGjB,OAAO,CAC/B;AAAA,WAAM;AAAA,aAAMS,aAAa,CAAC;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAnB;AAAA,KAAN;AAAA,GAD+B,EAE/B,EAF+B,CAAjC;;AAKA,MAAMY,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnCC,IAAAA,UAAU,CAAC,YAAM;AACfC,MAAAA,KAAK,CAACR,QAAQ,CAACC,OAAV,CAAL;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJD;;AAMA,MAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B;AACAF,IAAAA,UAAU,CAAC;AAAA,aAAMC,KAAK,CAAC,KAAI,CAAChB,KAAL,CAAWI,KAAZ,CAAX;AAAA,KAAD,EAAgC,GAAhC,CAAV;AACD,GAHD;;AAKA,SACE,iCACE;AAAO,IAAA,KAAK,EAAEE,IAAd;AAAoB,IAAA,QAAQ,EAAE,kBAAAY,CAAC;AAAA,aAAIX,OAAO,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AAAA;AAA/B,IADF,EAEE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAEV,MADV;AAEE,IAAA,aAAa,EAAEG;AAFjB,IAFF,EAME;AAAQ,IAAA,OAAO,EAAEC;AAAjB,mBANF,CADF;AAUD,CA/CD;;AAiDA,IAAMO,KAAK,GAAG1B,IAAI,CAAC,SAAS0B,KAAT,OAA0C;AAAA,MAAzBC,aAAyB,QAAzBA,aAAyB;AAAA,MAAVZ,MAAU,QAAVA,MAAU;AAC3Da,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SACE;AAAQ,IAAA,OAAO,EAAEF,aAAjB;AAAgC,IAAA,KAAK,EAAE;AAAEV,MAAAA,KAAK,EAAEF,MAAM,CAACE;AAAhB;AAAvC,KACIF,MAAM,CAACC,IADX,CADF;AAKD,CAPiB,CAAlB;AASA,eAAeR,WAAf","sourcesContent":["import { \n  useState, \n  useReducer,\n  memo,\n  useMemo,\n  useCallback,\n  useRef\n} from 'react'\n\n\nconst countReducer = (state, action) => {\n  switch(action.type) {\n    case 'add':\n      return state + 1\n    case 'minus':\n      return state - 1\n    default:\n      return state\n  }\n}\n\nconst MyCountFunc = () => {\n\n  const [count, dispatchCount] = useReducer(countReducer, 0)\n  const [name, setName] = useState('thomas')\n\n  const countRef = useRef()\n  countRef.current = count\n\n  const config = useMemo(\n    () => ({\n      text: `count is ${count}`,\n      color: count > 3 ? 'red' : 'blue'\n    }), \n    [count]\n  )\n\n  // const handleButtonClick = useCallback(\n  //   () => dispatchCount({ type: 'add' }), \n  //   []\n  // )\n\n  const handleButtonClick = useMemo(\n    () => () => dispatchCount({ type: 'add' }), \n    []\n  )\n\n  const handleAlertButtonClick = () => {\n    setTimeout(() => {\n      alert(countRef.current)\n    }, 2000)\n  }\n\n  const handleButtonClick2 = () => {\n    // const count = this.state.count\n    setTimeout(() => alert(this.state.count), 200)\n  }\n\n  return (\n    <div>\n      <input value={name} onChange={e => setName(e.target.value)} />\n      <Child \n        config={config}\n        onButtonClick={handleButtonClick}\n      />\n      <button onClick={handleAlertButtonClick}>alert count</button>\n    </div>\n  )\n}\n\nconst Child = memo(function Child({ onButtonClick, config }) {\n  console.log('child render')\n  return (\n    <button onClick={onButtonClick} style={{ color: config.color }}>\n      { config.text } \n    </button>\n  )\n})\n\nexport default MyCountFunc"]},"metadata":{},"sourceType":"module"}