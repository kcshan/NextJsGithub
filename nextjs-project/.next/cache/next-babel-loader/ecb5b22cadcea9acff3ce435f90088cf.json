{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { useState, useEffect, useReducer } from 'react';\n\nvar MyCount =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyCount, _React$Component);\n\n  function MyCount() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MyCount);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MyCount)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      count: 0\n    });\n\n    return _this;\n  }\n\n  _createClass(MyCount, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.interval = setInterval(function () {\n        _this2.setState({\n          count: _this2.state.count + 1\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"span\", null, this.state.count);\n    }\n  }]);\n\n  return MyCount;\n}(React.Component);\n\nvar countReducer = function countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n};\n\nvar MyCountFunc = function MyCountFunc() {\n  // const [count, setCount] = useState(0)\n  var _useReducer = useReducer(countReducer, 0),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      count = _useReducer2[0],\n      dispatchCount = _useReducer2[1]; // setCount(1)\n  // setCount(c => 1)\n\n\n  useEffect(function () {\n    var interval = setInterval(function () {\n      // setCount(c => c + 1)\n      dispatchCount({\n        type: 'add'\n      });\n    }, 1000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  return React.createElement(\"span\", null, count);\n};\n\nexport default MyCountFunc;","map":{"version":3,"sources":["/Users/yangshasha/Downloads/workspace/coding/nodejs/NextJsGithub/nextjs-project/pages/test/b.js"],"names":["React","useState","useEffect","useReducer","MyCount","count","interval","setInterval","setState","state","clearInterval","Component","countReducer","action","type","MyCountFunc","dispatchCount"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;;IAEMC,O;;;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,KAAK,EAAE;AADD,K;;;;;;;wCAIa;AAAA;;AACnB,WAAKC,QAAL,GAAgBC,WAAW,CAAC,YAAM;AAChC,QAAA,MAAI,CAACC,QAAL,CAAc;AACZH,UAAAA,KAAK,EAAE,MAAI,CAACI,KAAL,CAAWJ,KAAX,GAAmB;AADd,SAAd;AAGD,OAJ0B,EAIxB,IAJwB,CAA3B;AAKD;;;2CAEuB;AACtB,UAAI,KAAKC,QAAT,EAAmB;AACjBI,QAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACD;AACF;;;6BAES;AACR,aAAO,kCAAQ,KAAKG,KAAL,CAAWJ,KAAnB,CAAP;AACD;;;;EArBmBL,KAAK,CAACW,S;;AAwB5B,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACH,KAAD,EAAQI,MAAR,EAAmB;AACtC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,KAAL;AACE,aAAOL,KAAK,GAAG,CAAf;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD,CATD;;AAWA,IAAMM,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB;AADwB,oBAGOZ,UAAU,CAACS,YAAD,EAAe,CAAf,CAHjB;AAAA;AAAA,MAGjBP,KAHiB;AAAA,MAGVW,aAHU,oBAKxB;AACA;;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMI,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjC;AACAS,MAAAA,aAAa,CAAC;AACZF,QAAAA,IAAI,EAAE;AADM,OAAD,CAAb;AAGD,KAL2B,EAKzB,IALyB,CAA5B;AAMA,WAAO;AAAA,aAAMJ,aAAa,CAACJ,QAAD,CAAnB;AAAA,KAAP;AACD,GARQ,EAQN,EARM,CAAT;AAUA,SAAO,kCAAQD,KAAR,CAAP;AACD,CAnBD;;AAqBA,eAAeU,WAAf","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\n\nclass MyCount extends React.Component {\n  state = {\n    count: 0\n  }\n\n  componentDidMount () {\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      })\n    }, 1000)\n  }\n\n  componentWillUnmount () {\n    if (this.interval) {\n      clearInterval(this.interval)\n    }\n  }\n\n  render () {\n    return <span>{ this.state.count }</span>\n  }\n}\n\nconst countReducer = (state, action) => {\n  switch(action.type) {\n    case 'add':\n      return state + 1\n    case 'minus':\n      return state - 1\n    default:\n      return state\n  }\n}\n\nconst MyCountFunc = () => {\n  // const [count, setCount] = useState(0)\n\n  const [count, dispatchCount] = useReducer(countReducer, 0)\n\n  // setCount(1)\n  // setCount(c => 1)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // setCount(c => c + 1)\n      dispatchCount({\n        type: 'add'\n      })\n    }, 1000)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <span>{ count }</span>\n}\n\nexport default MyCountFunc"]},"metadata":{},"sourceType":"module"}