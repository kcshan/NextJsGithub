{"ast":null,"code":"import React from \"react\";\n// import '../test.css'\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { connect } from 'react-redux';\nimport getConfig from 'next/config';\nimport { add } from '../store/store';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst events = ['routeChangeStart', 'routeChangeComplete', 'routeChangeError', 'beforeHistoryChange', 'hashChangeStart', 'hashChangeComplete'];\n\nconst makeEvent = type => {\n  return (...args) => {// console.log(type, ...args)\n  };\n};\n\nevents.forEach(event => {\n  Router.events.on(event, makeEvent(event));\n});\n\nconst Index = ({\n  counter,\n  username,\n  add,\n  rename\n}) => {\n  const gotoTestB = () => {\n    Router.push({\n      pathname: '/test/b',\n      query: {\n        id: 2\n      }\n    }, '/test/b/2');\n  };\n\n  useEffect(() => {\n    axios.get('/api/user/info').then(resp => {\n      console.log('index useEffect ', resp);\n    });\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(\"span\", null, \"Count: \", counter), React.createElement(\"br\", null), React.createElement(\"span\", null, \"UserName: \", username), React.createElement(\"br\", null), React.createElement(\"input\", {\n    value: username,\n    onChange: e => rename(e.target.value)\n  }), React.createElement(\"button\", {\n    onClick: () => add(counter)\n  }, \"do add\"), React.createElement(\"a\", {\n    href: publicRuntimeConfig.OAUTH_URL\n  }, \"\\u53BB\\u767B\\u5F55\"));\n};\n\nIndex.getInitialProps = async ({\n  reduxStore\n}) => {\n  reduxStore.dispatch(add(3));\n  return {};\n};\n\nexport default connect(function mapStateToProps(state) {\n  return {\n    counter: state.counter.count,\n    username: state.user.username\n  };\n}, function mapDispatchToProps(dispatch) {\n  return {\n    add: num => dispatch({\n      type: 'ADD',\n      num\n    }),\n    rename: name => dispatch({\n      type: 'UPDATE_USERNAME',\n      name\n    })\n  };\n})(Index);","map":{"version":3,"sources":["/Users/yangshasha/Downloads/workspace/coding/nodejs/NextJsGithub/nextjs-project/pages/index.js"],"names":["useEffect","axios","Router","connect","getConfig","add","publicRuntimeConfig","events","makeEvent","type","args","forEach","event","on","Index","counter","username","rename","gotoTestB","push","pathname","query","id","get","then","resp","console","log","e","target","value","OAUTH_URL","getInitialProps","reduxStore","dispatch","mapStateToProps","state","count","user","mapDispatchToProps","num","name"],"mappings":";AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,GAAT,QAAoB,gBAApB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA0BF,SAAS,EAAzC;AAEA,MAAMG,MAAM,GAAG,CACb,kBADa,EAEb,qBAFa,EAGb,kBAHa,EAIb,qBAJa,EAKb,iBALa,EAMb,oBANa,CAAf;;AASA,MAAMC,SAAS,GAAIC,IAAD,IAAU;AAC1B,SAAO,CAAC,GAAGC,IAAJ,KAAa,CAClB;AACD,GAFD;AAGD,CAJD;;AAMAH,MAAM,CAACI,OAAP,CAAeC,KAAK,IAAI;AACtBV,EAAAA,MAAM,CAACK,MAAP,CAAcM,EAAd,CAAiBD,KAAjB,EAAwBJ,SAAS,CAACI,KAAD,CAAjC;AACD,CAFD;;AAKA,MAAME,KAAK,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBX,EAAAA,GAArB;AAA0BY,EAAAA;AAA1B,CAAD,KAAwC;AAEpD,QAAMC,SAAS,GAAG,MAAM;AACtBhB,IAAAA,MAAM,CAACiB,IAAP,CACE;AACEC,MAAAA,QAAQ,EAAE,SADZ;AAEEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,EAAE,EAAE;AADC;AAFT,KADF,EAOE,WAPF;AASD,GAVD;;AAYAtB,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAACsB,GAAN,CAAU,gBAAV,EAA4BC,IAA5B,CAAiCC,IAAI,IAAI;AACvCC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,IAAhC;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SACE,0CACE,6CAAcV,OAAd,CADF,EAEE,+BAFF,EAGE,gDAAiBC,QAAjB,CAHF,EAIE,+BAJF,EAKE;AAAO,IAAA,KAAK,EAAEA,QAAd;AAAwB,IAAA,QAAQ,EAAEY,CAAC,IAAIX,MAAM,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV;AAA7C,IALF,EAME;AAAQ,IAAA,OAAO,EAAE,MAAMzB,GAAG,CAACU,OAAD;AAA1B,cANF,EAOE;AAAG,IAAA,IAAI,EAAET,mBAAmB,CAACyB;AAA7B,0BAPF,CADF;AAYD,CAhCD;;AAkCAjB,KAAK,CAACkB,eAAN,GAAwB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAA0B;AAChDA,EAAAA,UAAU,CAACC,QAAX,CAAoB7B,GAAG,CAAC,CAAD,CAAvB;AACA,SAAO,EAAP;AACD,CAHD;;AAKA,eAAeF,OAAO,CACpB,SAASgC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLrB,IAAAA,OAAO,EAAEqB,KAAK,CAACrB,OAAN,CAAcsB,KADlB;AAELrB,IAAAA,QAAQ,EAAEoB,KAAK,CAACE,IAAN,CAAWtB;AAFhB,GAAP;AAID,CANmB,EAOpB,SAASuB,kBAAT,CAA4BL,QAA5B,EAAsC;AACpC,SAAO;AACL7B,IAAAA,GAAG,EAAGmC,GAAD,IAASN,QAAQ,CAAC;AAAEzB,MAAAA,IAAI,EAAE,KAAR;AAAe+B,MAAAA;AAAf,KAAD,CADjB;AAELvB,IAAAA,MAAM,EAAGwB,IAAD,IAAUP,QAAQ,CAAC;AAAEzB,MAAAA,IAAI,EAAE,iBAAR;AAA2BgC,MAAAA;AAA3B,KAAD;AAFrB,GAAP;AAID,CAZmB,CAAP,CAab3B,KAba,CAAf","sourcesContent":["// import '../test.css'\nimport { useEffect } from 'react'\nimport axios from 'axios'\nimport Router from 'next/router'\nimport { connect } from 'react-redux'\nimport getConfig from 'next/config'\n\nimport { add } from '../store/store'\n\nconst { publicRuntimeConfig } = getConfig()\n\nconst events = [\n  'routeChangeStart',\n  'routeChangeComplete',\n  'routeChangeError',\n  'beforeHistoryChange',\n  'hashChangeStart',\n  'hashChangeComplete'\n]\n\nconst makeEvent = (type) => {\n  return (...args) => {\n    // console.log(type, ...args)\n  }\n}\n\nevents.forEach(event => {\n  Router.events.on(event, makeEvent(event))\n})\n\n\nconst Index = ({ counter, username, add, rename }) => {\n  \n  const gotoTestB = () => {\n    Router.push(\n      {\n        pathname: '/test/b',\n        query: {\n          id: 2\n        },\n      },\n      '/test/b/2'\n    )\n  }\n\n  useEffect(() => {\n    axios.get('/api/user/info').then(resp => {\n      console.log('index useEffect ', resp)\n    })\n  }, [])\n\n  return (\n    <>\n      <span>Count: {counter}</span>\n      <br/>\n      <span>UserName: {username}</span>\n      <br/>\n      <input value={username} onChange={e => rename(e.target.value)}/>\n      <button onClick={() => add(counter)}>do add</button>\n      <a href={publicRuntimeConfig.OAUTH_URL}>去登录</a>\n    </>\n  )\n  \n}\n\nIndex.getInitialProps = async ({ reduxStore }) => {\n  reduxStore.dispatch(add(3))\n  return {}\n}\n\nexport default connect(\n  function mapStateToProps(state) {\n    return {\n      counter: state.counter.count,\n      username: state.user.username\n    }\n  },\n  function mapDispatchToProps(dispatch) {\n    return {\n      add: (num) => dispatch({ type: 'ADD', num }),\n      rename: (name) => dispatch({ type: 'UPDATE_USERNAME', name })\n    }\n  }\n)(Index)"]},"metadata":{},"sourceType":"module"}