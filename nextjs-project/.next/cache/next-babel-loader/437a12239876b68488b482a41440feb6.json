{"ast":null,"code":"import _Spin from \"antd/lib/spin\";\nimport _Select from \"antd/lib/select\";\nimport React from \"react\";\nimport { useState, useCallback, useRef } from 'react';\nimport debounce from 'lodash/debounce';\nimport api from '../lib/api';\nconst Option = _Select.Option;\n\nconst SearchUser = ({\n  onChange,\n  value\n}) => {\n  // { current: 0 }\n  const lastFetchIdRef = useRef(0);\n  const [fetching, setFetching] = useState(false);\n  const [options, setOptions] = useState([]);\n  const fetchUser = useCallback(debounce(value => {\n    console.log('fetching user', value);\n    lastFetchIdRef.current += 1;\n    const fetchId = lastFetchIdRef.current;\n    setFetching(true);\n    setOptions([]);\n    api.request({\n      url: `/search/users?q=${value}`\n    }).then(resp => {\n      console.log('user', resp);\n\n      if (fetchId !== lastFetchIdRef.current) {\n        return;\n      }\n\n      const data = resp.data.items.map(user => ({\n        text: user.login,\n        value: user.login\n      }));\n      setFetching(false);\n      setOptions(data);\n    });\n  }, 500), []);\n\n  const handleChange = value => {\n    setOptions([]);\n    setFetching(false);\n    onChange(value);\n  };\n\n  return React.createElement(_Select, {\n    style: {\n      width: 200\n    },\n    showSearch: true,\n    notFoundContent: fetching ? React.createElement(_Spin, {\n      size: \"small\"\n    }) : React.createElement(\"span\", null, \"nothing\"),\n    filterOption: false,\n    placeholder: \"\\u521B\\u5EFA\\u8005\",\n    onChange: handleChange,\n    value: value,\n    onSearch: fetchUser,\n    allowClear: true\n  }, options.map(op => React.createElement(Option, {\n    value: op.value,\n    key: op.value\n  }, op.text)));\n};\n\nexport default SearchUser;","map":{"version":3,"sources":["/Users/yangshasha/Downloads/workspace/coding/nodejs/NextJsGithub/nextjs-project/components/SearchUser.jsx"],"names":["useState","useCallback","useRef","debounce","api","Option","SearchUser","onChange","value","lastFetchIdRef","fetching","setFetching","options","setOptions","fetchUser","console","log","current","fetchId","request","url","then","resp","data","items","map","user","text","login","handleChange","width","op"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,QAA8C,OAA9C;AAEA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,MAAMC,MAAM,GAAG,QAAOA,MAAtB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAyB;AAC1C;AACA,QAAMC,cAAc,GAAGP,MAAM,CAAC,CAAD,CAA7B;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAMc,SAAS,GAAGb,WAAW,CAACE,QAAQ,CACpCK,KAAK,IAAI;AACPO,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BR,KAA7B;AACAC,IAAAA,cAAc,CAACQ,OAAf,IAA0B,CAA1B;AACA,UAAMC,OAAO,GAAGT,cAAc,CAACQ,OAA/B;AACAN,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,UAAU,CAAC,EAAD,CAAV;AAEAT,IAAAA,GAAG,CAACe,OAAJ,CAAY;AACVC,MAAAA,GAAG,EAAG,mBAAkBZ,KAAM;AADpB,KAAZ,EAGCa,IAHD,CAGMC,IAAI,IAAI;AACZP,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBM,IAApB;;AACA,UAAIJ,OAAO,KAAKT,cAAc,CAACQ,OAA/B,EAAwC;AACtC;AACD;;AACD,YAAMM,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUC,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,KAAK;AACxCC,QAAAA,IAAI,EAAED,IAAI,CAACE,KAD6B;AAExCpB,QAAAA,KAAK,EAAEkB,IAAI,CAACE;AAF4B,OAAL,CAAxB,CAAb;AAIAjB,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,MAAAA,UAAU,CAACU,IAAD,CAAV;AACD,KAdD;AAeD,GAvBmC,EAwBpC,GAxBoC,CAAT,EAyB1B,EAzB0B,CAA7B;;AA2BA,QAAMM,YAAY,GAAGrB,KAAK,IAAI;AAC5BK,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAF,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,IAAAA,QAAQ,CAACC,KAAD,CAAR;AACD,GAJD;;AAMA,SAAO;AACL,IAAA,KAAK,EAAE;AAAEsB,MAAAA,KAAK,EAAE;AAAT,KADF;AAEL,IAAA,UAAU,EAAE,IAFP;AAGL,IAAA,eAAe,EAAEpB,QAAQ,GAAG;AAAM,MAAA,IAAI,EAAC;AAAX,MAAH,GAA2B,4CAH/C;AAIL,IAAA,YAAY,EAAE,KAJT;AAKL,IAAA,WAAW,EAAC,oBALP;AAML,IAAA,QAAQ,EAAEmB,YANL;AAOL,IAAA,KAAK,EAAErB,KAPF;AAQL,IAAA,QAAQ,EAAEM,SARL;AASL,IAAA,UAAU,EAAE;AATP,KAYHF,OAAO,CAACa,GAAR,CAAYM,EAAE,IACZ,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEA,EAAE,CAACvB,KAAlB;AAAyB,IAAA,GAAG,EAAEuB,EAAE,CAACvB;AAAjC,KAAyCuB,EAAE,CAACJ,IAA5C,CADF,CAZG,CAAP;AAiBD,CAxDD;;AA0DA,eAAerB,UAAf","sourcesContent":["import { useState, useCallback, useRef } from 'react'\nimport { Select, Spin } from 'antd'\nimport debounce from 'lodash/debounce'\nimport api from '../lib/api'\n\nconst Option = Select.Option\n\nconst SearchUser = ({ onChange, value }) => {\n  // { current: 0 }\n  const lastFetchIdRef = useRef(0)\n  const [fetching, setFetching] = useState(false)\n  const [options, setOptions] = useState([])\n\n  const fetchUser = useCallback(debounce(\n    value => {\n      console.log('fetching user', value)\n      lastFetchIdRef.current += 1\n      const fetchId = lastFetchIdRef.current\n      setFetching(true)\n      setOptions([])\n\n      api.request({\n        url: `/search/users?q=${value}`\n      })\n      .then(resp => {\n        console.log('user', resp)\n        if (fetchId !== lastFetchIdRef.current) {\n          return \n        }\n        const data = resp.data.items.map(user => ({\n          text: user.login,\n          value: user.login\n        }))\n        setFetching(false)\n        setOptions(data)\n      })\n    }, \n    500\n  ), [])\n\n  const handleChange = value => {\n    setOptions([])\n    setFetching(false)\n    onChange(value)\n  }\n\n  return <Select\n    style={{ width: 200 }}\n    showSearch={true}\n    notFoundContent={fetching ? <Spin size=\"small\" /> : <span>nothing</span>}\n    filterOption={false}\n    placeholder=\"创建者\"\n    onChange={handleChange}\n    value={value}\n    onSearch={fetchUser}\n    allowClear={true}\n  >\n    {\n      options.map(op => (\n        <Option value={op.value} key={op.value}>{op.text}</Option>\n      ))\n    }\n  </Select>\n}\n\nexport default SearchUser"]},"metadata":{},"sourceType":"module"}